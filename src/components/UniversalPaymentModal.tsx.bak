'use client';

import React, { useState } from 'react';
import { X, CreditCard, Banknote, ArrowRight, ShoppingBag, Calendar, GraduationCap } from 'lucide-react';

interface PaymentItem {
  id: string;
  name: string;
  price: number;
  salePrice?: number;
  type: 'service' | 'product' | 'formation';
  image?: string;
  duration?: number; // Pour prestations et formations
}

interface UniversalPaymentModalProps {
  item: PaymentItem;
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: (orderId: string) => void;
}

export default function UniversalPaymentModal({ item, isOpen, onClose, onSuccess }: UniversalPaymentModalProps) {
  const [step, setStep] = useState<'info' | 'payment' | 'confirmation'>('info');
  const [loading, setLoading] = useState(false);

  const [formData, setFormData] = useState({
    customerName: '',
    customerEmail: '',
    customerPhone: '',
    customerAddress: '',
    customerCity: '',
    customerZip: '',
    paymentMethod: 'card' as 'card' | 'transfer' | 'cash',
    notes: '',
    // Pour les prestations (RDV)
    selectedDate: '',
    selectedTime: '',
    // Pour les produits
    quantity: 1,
    shippingMethod: 'standard' as 'standard' | 'express'
  });

  if (!isOpen) return null;

  const finalPrice = item.salePrice || item.price;
  const shippingCost = item.type === 'product' ? (formData.shippingMethod === 'express' ? 9.90 : 4.90) : 0;
  const subtotal = finalPrice * (item.type === 'product' ? formData.quantity : 1);
  const total = subtotal + shippingCost;

  const getIcon = () => {
    switch (item.type) {
      case 'service': return <Calendar className="w-6 h-6 text-rose-500" />;
      case 'product': return <ShoppingBag className="w-6 h-6 text-purple-500" />;
      case 'formation': return <GraduationCap className="w-6 h-6 text-blue-500" />;
    }
  };

  const getTitle = () => {
    switch (item.type) {
      case 'service': return 'Réserver cette prestation';
      case 'product': return 'Acheter ce produit';
      case 'formation': return 'S\'inscrire à cette formation';
    }
  };

  const handleSubmit = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');

      const orderData = {
        orderType: item.type,
        items: [{
          id: item.id,
          name: item.name,
          quantity: item.type === 'product' ? formData.quantity : 1,
          price: finalPrice,
          image: item.image,
          description: item.type === 'service' ? `Prestation de ${item.duration} min` :
                       item.type === 'formation' ? `Formation de ${item.duration}h` : ''
        }],
        customerName: formData.customerName,
        customerEmail: formData.customerEmail,
        customerPhone: formData.customerPhone,
        customerAddress: item.type === 'product' ? JSON.stringify({
          address: formData.customerAddress,
          city: formData.customerCity,
          zip: formData.customerZip
        }) : null,
        subtotal,
        shippingCost,
        totalAmount: total,
        paymentMethod: formData.paymentMethod,
        notes: formData.notes,
        // Pour les prestations
        ...(item.type === 'service' && {
          selectedDate: formData.selectedDate,
          selectedTime: formData.selectedTime
        })
      };

      // Créer la commande d'abord
      const orderResponse = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` })
        },
        body: JSON.stringify(orderData)
      });

      if (!orderResponse.ok) {
        alert('Erreur lors de la création de la commande');
        return;
      }

      const orderResult = await orderResponse.json();

      // Si paiement par carte, rediriger vers Stripe
      if (formData.paymentMethod === 'card') {
        const stripeResponse = await fetch('/api/create-stripe-checkout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            items: orderData.items,
            customerEmail: formData.customerEmail,
            orderType: item.type,
            shippingCost,
            orderId: orderResult.order.id
          })
        });

        const stripeResult = await stripeResponse.json();

        if (stripeResult.success && stripeResult.url) {
          // Rediriger vers Stripe Checkout
          window.location.href = stripeResult.url;
        } else {
          alert(stripeResult.message || 'Erreur lors de la création de la session de paiement');
        }
      } else {
        // Autres modes de paiement (virement, espèces)
        setStep('confirmation');
        onSuccess?.(orderResult.order.id);
      }
    } catch (error) {
      console.error('Erreur:', error);
      alert('Une erreur est survenue');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-gradient-to-r from-rose-500 to-purple-600 text-white p-6 rounded-t-2xl">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              {getIcon()}
              <h2 className="text-2xl font-bold">{getTitle()}</h2>
            </div>
            <button onClick={onClose} className="text-white hover:bg-white/20 rounded-full p-2 transition">
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Étape 1: Informations */}
          {step === 'info' && (
            <div className="space-y-6">
              {/* Résumé article */}
              <div className="bg-gray-50 rounded-xl p-4 flex gap-4">
                {item.image && (
                  <img src={item.image} alt={item.name} className="w-24 h-24 object-cover rounded-lg" />
                )}
                <div className="flex-1">
                  <h3 className="font-bold text-lg text-gray-900">{item.name}</h3>
                  <div className="flex items-center gap-2 mt-2">
                    {item.salePrice && (
                      <span className="text-gray-400 line-through">{item.price}€</span>
                    )}
                    <span className="text-2xl font-bold text-rose-600">{finalPrice}€</span>
                  </div>
                  {item.duration && (
                    <p className="text-sm text-gray-600 mt-1">Durée : {item.duration} {item.type === 'formation' ? 'heures' : 'min'}</p>
                  )}
                </div>
              </div>

              {/* Formulaire informations client */}
              <div className="space-y-4">
                <h4 className="font-semibold text-gray-900">Vos informations</h4>

                <div className="grid grid-cols-2 gap-4">
                  <div className="col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Nom complet *</label>
                    <input
                      type="text"
                      required
                      value={formData.customerName}
                      onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                      placeholder="Marie Dupont"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                    <input
                      type="email"
                      required
                      value={formData.customerEmail}
                      onChange={(e) => setFormData({ ...formData, customerEmail: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                      placeholder="marie@email.com"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Téléphone *</label>
                    <input
                      type="tel"
                      required
                      value={formData.customerPhone}
                      onChange={(e) => setFormData({ ...formData, customerPhone: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                      placeholder="06 12 34 56 78"
                    />
                  </div>
                </div>

                {/* Quantité pour produits */}
                {item.type === 'product' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Quantité</label>
                    <input
                      type="number"
                      min="1"
                      value={formData.quantity}
                      onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) || 1 })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                    />
                  </div>
                )}

                {/* Adresse de livraison pour produits */}
                {item.type === 'product' && (
                  <React.Fragment>
                    <h4 className="font-semibold text-gray-900 mt-6">Adresse de livraison</h4>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Adresse *</label>
                        <input
                          type="text"
                          required
                          value={formData.customerAddress}
                          onChange={(e) => setFormData({ ...formData, customerAddress: e.target.value })}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                          placeholder="12 rue de la Paix"
                        />
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Code postal *</label>
                          <input
                            type="text"
                            required
                            value={formData.customerZip}
                            onChange={(e) => setFormData({ ...formData, customerZip: e.target.value })}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                            placeholder="75001"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Ville *</label>
                          <input
                            type="text"
                            required
                            value={formData.customerCity}
                            onChange={(e) => setFormData({ ...formData, customerCity: e.target.value })}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                            placeholder="Paris"
                          />
                        </div>
                      </div>

                      {/* Mode de livraison */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-3">Mode de livraison</label>
                        <div className="space-y-2">
                          <label className="flex items-center gap-3 p-4 border-2 rounded-lg cursor-pointer hover:bg-gray-50 transition">
                            <input
                              type="radio"
                              name="shipping"
                              value="standard"
                              checked={formData.shippingMethod === 'standard'}
                              onChange={() => setFormData({ ...formData, shippingMethod: 'standard' })}
                              className="w-4 h-4 text-rose-600"
                            />
                            <div className="flex-1">
                              <p className="font-medium">Standard (3-5 jours)</p>
                              <p className="text-sm text-gray-600">4.90€</p>
                            </div>
                          </label>
                          <label className="flex items-center gap-3 p-4 border-2 rounded-lg cursor-pointer hover:bg-gray-50 transition">
                            <input
                              type="radio"
                              name="shipping"
                              value="express"
                              checked={formData.shippingMethod === 'express'}
                              onChange={() => setFormData({ ...formData, shippingMethod: 'express' })}
                              className="w-4 h-4 text-rose-600"
                            />
                            <div className="flex-1">
                              <p className="font-medium">Express (24-48h)</p>
                              <p className="text-sm text-gray-600">9.90€</p>
                            </div>
                          </label>
                        </div>
                      </div>
                    </React.Fragment>
                  )}

                  {/* Date et heure pour prestations */}
                  {item.type === 'service' && (
                    <React.Fragment>
                      <h4 className="font-semibold text-gray-900 mt-6">Choisir un créneau</h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Date *</label>
                          <input
                            type="date"
                            required
                            value={formData.selectedDate}
                            onChange={(e) => setFormData({ ...formData, selectedDate: e.target.value })}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                            min={new Date().toISOString().split('T')[0]}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Heure *</label>
                          <select
                            required
                            value={formData.selectedTime}
                            onChange={(e) => setFormData({ ...formData, selectedTime: e.target.value })}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                          >
                            <option value="">Sélectionner...</option>
                            {['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00', '18:00'].map(time => (
                              <option key={time} value={time}>{time}</option>
                            ))}
                          </select>
                        </div>
                      </div>
                    </React.Fragment>
                  )}

                  {/* Notes */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Notes (optionnel)</label>
                    <textarea
                      value={formData.notes}
                      onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
                      rows={3}
                      placeholder="Informations supplémentaires..."
                    />
                  </div>
                </div>

                {/* Bouton suivant */}
                <button
                  onClick={() => setStep('payment')}
                  disabled={!formData.customerName || !formData.customerEmail || !formData.customerPhone}
                  className="w-full bg-gradient-to-r from-rose-500 to-purple-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  Continuer vers le paiement
                  <ArrowRight className="w-5 h-5" />
                </button>
              </div>
            </div>
          )}

          {/* Étape 2: Paiement */}
          {step === 'payment' && (
            <div className="space-y-6">
              {/* Récapitulatif */}
              <div className="bg-gray-50 rounded-xl p-4 space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-600">Sous-total</span>
                  <span className="font-medium">{subtotal.toFixed(2)}€</span>
                </div>
                {shippingCost > 0 && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Livraison ({formData.shippingMethod})</span>
                    <span className="font-medium">{shippingCost.toFixed(2)}€</span>
                  </div>
                )}
                <div className="border-t pt-2 flex justify-between items-center">
                  <span className="font-bold text-lg">Total</span>
                  <span className="font-bold text-2xl text-rose-600">{total.toFixed(2)}€</span>
                </div>
              </div>

              {/* Mode de paiement */}
              <div>
                <h4 className="font-semibold text-gray-900 mb-4">Mode de paiement</h4>
                <div className="space-y-3">
                  <label className="flex items-center gap-4 p-4 border-2 rounded-xl cursor-pointer hover:bg-gray-50 transition">
                    <input
                      type="radio"
                      name="payment"
                      value="card"
                      checked={formData.paymentMethod === 'card'}
                      onChange={() => setFormData({ ...formData, paymentMethod: 'card' })}
                      className="w-5 h-5 text-rose-600"
                    />
                    <CreditCard className="w-6 h-6 text-gray-600" />
                    <span className="font-medium">Carte bancaire</span>
                  </label>

                  <label className="flex items-center gap-4 p-4 border-2 rounded-xl cursor-pointer hover:bg-gray-50 transition">
                    <input
                      type="radio"
                      name="payment"
                      value="transfer"
                      checked={formData.paymentMethod === 'transfer'}
                      onChange={() => setFormData({ ...formData, paymentMethod: 'transfer' })}
                      className="w-5 h-5 text-rose-600"
                    />
                    <Banknote className="w-6 h-6 text-gray-600" />
                    <span className="font-medium">Virement bancaire</span>
                  </label>

                  {item.type === 'service' && (
                    <label className="flex items-center gap-4 p-4 border-2 rounded-xl cursor-pointer hover:bg-gray-50 transition">
                      <input
                        type="radio"
                        name="payment"
                        value="cash"
                        checked={formData.paymentMethod === 'cash'}
                        onChange={() => setFormData({ ...formData, paymentMethod: 'cash' })}
                        className="w-5 h-5 text-rose-600"
                      />
                      <Banknote className="w-6 h-6 text-gray-600" />
                      <span className="font-medium">Paiement sur place</span>
                    </label>
                  )}
                </div>
              </div>

              {/* Boutons */}
              <div className="flex gap-4">
                <button
                  onClick={() => setStep('info')}
                  className="flex-1 bg-gray-200 text-gray-700 py-4 rounded-xl font-semibold hover:bg-gray-300 transition"
                >
                  Retour
                </button>
                <button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="flex-1 bg-gradient-to-r from-rose-500 to-purple-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transition disabled:opacity-50"
                >
                  {loading ? 'Traitement...' : 'Confirmer la commande'}
                </button>
              </div>
            </div>
          )}

          {/* Étape 3: Confirmation */}
          {step === 'confirmation' && (
            <div className="text-center py-8 space-y-6">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">
                  {item.type === 'service' ? 'Réservation confirmée !' :
                   item.type === 'product' ? 'Commande validée !' :
                   'Inscription confirmée !'}
                </h3>
                <p className="text-gray-600">
                  Un email de confirmation vous a été envoyé à <strong>{formData.customerEmail}</strong>
                </p>
              </div>
              <button
                onClick={onClose}
                className="bg-gradient-to-r from-rose-500 to-purple-600 text-white px-8 py-4 rounded-xl font-semibold hover:shadow-lg transition"
              >
                Fermer
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
