import { getPrismaClient } from './src/lib/prisma';

async function fixDecimalPrices() {
  const prisma = await getPrismaClient();
  
  try {
    console.log("üîß CORRECTION DES PRIX D√âCIMAUX");
    console.log("=" .repeat(80));
    
    // 1. R√©cup√©rer toutes les r√©servations avec des prix d√©cimaux
    const allReservations = await prisma.reservation.findMany({
      select: {
        id: true,
        totalPrice: true,
        paymentAmount: true,
        services: true,
        packages: true,
        user: {
          select: {
            name: true,
            email: true
          }
        }
      }
    });
    
    console.log(`\nüìä Nombre total de r√©servations: ${allReservations.length}`);
    
    let reservationsWithDecimals = [];
    let paymentsWithDecimals = [];
    
    // Identifier les prix avec d√©cimales
    for (const res of allReservations) {
      // V√©rifier totalPrice
      if (res.totalPrice && !Number.isInteger(res.totalPrice)) {
        reservationsWithDecimals.push({
          id: res.id,
          client: res.user?.name || 'Inconnu',
          oldPrice: res.totalPrice,
          newPrice: Math.round(res.totalPrice),
          services: res.services
        });
      }
      
      // V√©rifier paymentAmount
      if (res.paymentAmount && !Number.isInteger(res.paymentAmount)) {
        paymentsWithDecimals.push({
          id: res.id,
          client: res.user?.name || 'Inconnu',
          oldAmount: res.paymentAmount,
          newAmount: Math.round(res.paymentAmount)
        });
      }
    }
    
    console.log(`\n‚ùå R√©servations avec prix d√©cimaux: ${reservationsWithDecimals.length}`);
    console.log(`‚ùå Paiements avec montants d√©cimaux: ${paymentsWithDecimals.length}`);
    
    // 2. Corriger les prix d√©cimaux
    if (reservationsWithDecimals.length > 0) {
      console.log("\nüîÑ CORRECTION DES PRIX DE R√âSERVATION:");
      console.log("-" .repeat(80));
      
      for (const res of reservationsWithDecimals) {
        console.log(`\nüìù ${res.client}:`);
        console.log(`   Services: ${res.services}`);
        console.log(`   Prix avant: ${res.oldPrice}‚Ç¨`);
        console.log(`   Prix corrig√©: ${res.newPrice}‚Ç¨`);
        
        await prisma.reservation.update({
          where: { id: res.id },
          data: { totalPrice: res.newPrice }
        });
        
        console.log(`   ‚úÖ Corrig√©`);
      }
    }
    
    // 3. Corriger les montants de paiement d√©cimaux
    if (paymentsWithDecimals.length > 0) {
      console.log("\nüîÑ CORRECTION DES MONTANTS DE PAIEMENT:");
      console.log("-" .repeat(80));
      
      for (const payment of paymentsWithDecimals) {
        console.log(`\nüí≥ ${payment.client}:`);
        console.log(`   Montant avant: ${payment.oldAmount}‚Ç¨`);
        console.log(`   Montant corrig√©: ${payment.newAmount}‚Ç¨`);
        
        await prisma.reservation.update({
          where: { id: payment.id },
          data: { paymentAmount: payment.newAmount }
        });
        
        console.log(`   ‚úÖ Corrig√©`);
      }
    }
    
    // 4. V√©rifier les services dans la base pour s'assurer qu'ils ont des prix entiers
    const services = await prisma.service.findMany();
    
    console.log("\nüìã V√âRIFICATION DES PRIX DES SERVICES:");
    console.log("-" .repeat(80));
    
    let servicesWithDecimals = [];
    
    for (const service of services) {
      let needsUpdate = false;
      let updates: any = {};
      
      if (service.price && !Number.isInteger(service.price)) {
        console.log(`\n‚ö†Ô∏è  Service: ${service.name}`);
        console.log(`   Prix avant: ${service.price}‚Ç¨`);
        updates.price = Math.round(service.price);
        console.log(`   Prix corrig√©: ${updates.price}‚Ç¨`);
        needsUpdate = true;
      }
      
      if (service.promoPrice && !Number.isInteger(service.promoPrice)) {
        if (!needsUpdate) {
          console.log(`\n‚ö†Ô∏è  Service: ${service.name}`);
        }
        console.log(`   Prix promo avant: ${service.promoPrice}‚Ç¨`);
        updates.promoPrice = Math.round(service.promoPrice);
        console.log(`   Prix promo corrig√©: ${updates.promoPrice}‚Ç¨`);
        needsUpdate = true;
      }
      
      if (needsUpdate) {
        await prisma.service.update({
          where: { id: service.id },
          data: updates
        });
        console.log(`   ‚úÖ Service corrig√©`);
        servicesWithDecimals.push(service.name);
      }
    }
    
    if (servicesWithDecimals.length === 0) {
      console.log("   ‚úÖ Tous les services ont des prix entiers");
    }
    
    // 5. D√©finir les prix corrects pour chaque service
    const correctPrices: Record<string, { price: number, promoPrice?: number }> = {
      'hydro-naissance': { price: 80, promoPrice: 60 },
      'hydro-cleaning': { price: 120, promoPrice: 90 },
      'renaissance': { price: 100, promoPrice: 75 },
      'bb-glow': { price: 150, promoPrice: 120 },
      'led-therapie': { price: 50, promoPrice: 40 }
    };
    
    console.log("\nüéØ APPLICATION DES PRIX STANDARDS:");
    console.log("-" .repeat(80));
    
    for (const service of services) {
      const correctPrice = correctPrices[service.slug];
      if (correctPrice) {
        const needsUpdate = 
          service.price !== correctPrice.price || 
          (correctPrice.promoPrice && service.promoPrice !== correctPrice.promoPrice);
        
        if (needsUpdate) {
          console.log(`\nüìù ${service.name}:`);
          console.log(`   Prix actuel: ${service.price}‚Ç¨ (promo: ${service.promoPrice}‚Ç¨)`);
          console.log(`   Prix correct: ${correctPrice.price}‚Ç¨ (promo: ${correctPrice.promoPrice}‚Ç¨)`);
          
          await prisma.service.update({
            where: { id: service.id },
            data: {
              price: correctPrice.price,
              promoPrice: correctPrice.promoPrice || null
            }
          });
          
          console.log(`   ‚úÖ Prix standardis√©`);
        }
      }
    }
    
    // 6. R√©sum√© final
    console.log("\n" + "=" .repeat(80));
    console.log("‚úÖ CORRECTION TERMIN√âE!");
    console.log(`   - ${reservationsWithDecimals.length} prix de r√©servation corrig√©s`);
    console.log(`   - ${paymentsWithDecimals.length} montants de paiement corrig√©s`);
    console.log(`   - ${servicesWithDecimals.length} services corrig√©s`);
    console.log("\nüí° Tous les prix sont maintenant des nombres entiers!");
    
  } catch (error) {
    console.error("Erreur:", error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDecimalPrices();