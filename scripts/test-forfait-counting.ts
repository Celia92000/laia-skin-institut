import { getPrismaClient } from '../src/lib/prisma';

async function testForfaitCounting() {
  const prisma = await getPrismaClient();
  
  try {
    console.log("üîç TEST: COMMENT SONT COMPT√âS LES FORFAITS");
    console.log("=" .repeat(80));
    
    // R√©cup√©rer C√©lia Ivorra qui a 2 forfaits
    const celia = await prisma.user.findUnique({
      where: { email: 'celia.ivorra95@hotmail.fr' },
      include: {
        loyaltyProfile: true
      }
    });
    
    if (celia && celia.loyaltyProfile) {
      console.log(`\nüë§ ${celia.name}`);
      console.log(`   packagesCount actuel: ${celia.loyaltyProfile.packagesCount}`);
      
      // R√©cup√©rer toutes ses r√©servations avec forfaits
      const reservations = await prisma.reservation.findMany({
        where: {
          userId: celia.id,
          status: 'completed',
          OR: [
            { services: { contains: 'Forfait' } },
            { services: { contains: 'forfait' } }
          ]
        },
        orderBy: { date: 'asc' }
      });
      
      console.log(`\nüì¶ R√©servations avec forfaits trouv√©es: ${reservations.length}`);
      
      // Analyser chaque r√©servation
      let forfaitCount = 0;
      const forfaitTypes: { [key: string]: number } = {};
      
      for (const res of reservations) {
        const services = typeof res.services === 'string' 
          ? JSON.parse(res.services) 
          : res.services;
        
        console.log(`\n   Date: ${new Date(res.date).toLocaleDateString('fr-FR')}`);
        console.log(`   Services: ${JSON.stringify(services)}`);
        console.log(`   Packages: ${res.packages}`);
        
        // Compter ce forfait
        if (Array.isArray(services)) {
          for (const service of services) {
            if (service.toLowerCase().includes('forfait')) {
              forfaitCount++;
              const type = service;
              forfaitTypes[type] = (forfaitTypes[type] || 0) + 1;
            }
          }
        }
      }
      
      console.log("\nüìä R√âSUM√â:");
      console.log(`   Total de r√©servations forfait: ${forfaitCount}`);
      console.log(`   packagesCount en base: ${celia.loyaltyProfile.packagesCount}`);
      
      console.log("\n   D√©tail par type de forfait:");
      for (const [type, count] of Object.entries(forfaitTypes)) {
        console.log(`   - ${type}: ${count} s√©ance(s)`);
        const forfaitsCompletes = Math.floor(count / 4);
        const seancesEnCours = count % 4;
        console.log(`     = ${forfaitsCompletes} forfait(s) complet(s) + ${seancesEnCours} s√©ance(s) en cours`);
      }
      
      console.log("\nüí° INTERPR√âTATION:");
      console.log("   Le packagesCount repr√©sente probablement:");
      console.log("   - Soit le nombre de FORFAITS COMPL√âT√âS (groupes de 4 s√©ances)");
      console.log("   - Soit le nombre de R√âSERVATIONS de type forfait");
      
      if (celia.loyaltyProfile.packagesCount === forfaitCount) {
        console.log("\n   ‚úÖ packagesCount = nombre de R√âSERVATIONS forfait");
      } else if (celia.loyaltyProfile.packagesCount === Math.floor(forfaitCount / 4)) {
        console.log("\n   ‚úÖ packagesCount = nombre de FORFAITS COMPL√âT√âS (4 s√©ances)");
      } else {
        console.log("\n   ‚ö†Ô∏è  packagesCount ne correspond ni aux r√©servations ni aux forfaits complets");
      }
    }
    
  } catch (error) {
    console.error("Erreur:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testForfaitCounting();