import { getPrismaClient } from '../src/lib/prisma';

async function checkCeliaLoyalty() {
  const prisma = await getPrismaClient();
  
  try {
    // Trouver l'utilisateur Celia
    const celia = await prisma.user.findFirst({
      where: {
        OR: [
          { name: { contains: 'Celia', mode: 'insensitive' } },
          { email: { contains: 'celia', mode: 'insensitive' } }
        ]
      }
    });
    
    if (!celia) {
      console.log("‚ùå Utilisateur Celia non trouv√©");
      return;
    }
    
    console.log("üë§ Utilisateur trouv√©:", {
      id: celia.id,
      name: celia.name,
      email: celia.email
    });
    
    // V√©rifier le profil de fid√©lit√©
    const loyaltyProfile = await prisma.loyaltyProfile.findUnique({
      where: { userId: celia.id }
    });
    
    if (!loyaltyProfile) {
      console.log("‚ùå Pas de profil de fid√©lit√© pour Celia");
      console.log("üìù Cr√©ation d'un profil de fid√©lit√©...");
      
      const newProfile = await prisma.loyaltyProfile.create({
        data: {
          userId: celia.id,
          individualServicesCount: 0,
          packagesCount: 0,
          totalSpent: 0,
          availableDiscounts: '[]',
          lastVisit: new Date()
        }
      });
      
      console.log("‚úÖ Profil cr√©√©:", newProfile);
    } else {
      console.log("\nüìä Profil de fid√©lit√© actuel:");
      console.log("  - Soins individuels:", loyaltyProfile.individualServicesCount, "/ 5");
      console.log("  - Forfaits:", loyaltyProfile.packagesCount, "/ 3");
      console.log("  - Total d√©pens√©:", loyaltyProfile.totalSpent, "‚Ç¨");
      console.log("  - Derni√®re visite:", loyaltyProfile.lastVisit);
      
      // V√©rifier l'√©ligibilit√© aux r√©ductions
      if (loyaltyProfile.individualServicesCount >= 5) {
        console.log("  ‚úÖ √âLIGIBLE √† la r√©duction 5 soins (-20‚Ç¨)");
      } else {
        console.log("  ‚è≥ Encore", 5 - loyaltyProfile.individualServicesCount, "soin(s) pour la r√©duction");
      }
      
      if (loyaltyProfile.packagesCount >= 3) {
        console.log("  ‚úÖ √âLIGIBLE √† la r√©duction 3 forfaits (-30‚Ç¨)");
      } else {
        console.log("  ‚è≥ Encore", 3 - loyaltyProfile.packagesCount, "forfait(s) pour la r√©duction");
      }
    }
    
    // V√©rifier l'historique de fid√©lit√©
    const history = await prisma.loyaltyHistory.findMany({
      where: { userId: celia.id },
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    console.log("\nüìú Historique r√©cent de fid√©lit√©:");
    for (const entry of history) {
      console.log(`  - ${entry.createdAt.toLocaleDateString('fr-FR')} : ${entry.action} - ${entry.description}`);
    }
    
    // V√©rifier les r√©servations compl√©t√©es
    const completedReservations = await prisma.reservation.findMany({
      where: {
        userId: celia.id,
        status: 'completed'
      },
      orderBy: { date: 'desc' }
    });
    
    console.log("\nüìÖ R√©servations compl√©t√©es:", completedReservations.length);
    for (const res of completedReservations.slice(0, 5)) {
      console.log(`  - ${res.date.toLocaleDateString('fr-FR')} : ${res.services} (${res.paymentStatus})`);
    }
    
  } catch (error) {
    console.error("Erreur:", error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCeliaLoyalty();