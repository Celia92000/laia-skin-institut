import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || "postgresql://postgres.zsxweurvtsrdgehtadwa:%23SBxrx8kVc857Ed@aws-1-eu-west-3.pooler.supabase.com:5432/postgres"
    }
  }
});

async function fixReservations() {
  try {
    console.log('üîß Correction des r√©servations sans service...\n');
    
    // R√©cup√©rer tous les services
    const services = await prisma.service.findMany();
    console.log(`üìã ${services.length} services trouv√©s:`);
    services.forEach(s => console.log(`  - ${s.name} (${s.id})`));
    
    // R√©cup√©rer les r√©servations sans service
    const reservations = await prisma.reservation.findMany({
      where: {
        serviceId: null
      }
    });
    
    console.log(`\nüîç ${reservations.length} r√©servations sans service trouv√©es`);
    
    if (services.length === 0) {
      console.log('‚ùå Aucun service trouv√© dans la base de donn√©es');
      return;
    }
    
    // Assigner un service al√©atoire √† chaque r√©servation
    for (const reservation of reservations) {
      const randomService = services[Math.floor(Math.random() * services.length)];
      
      await prisma.reservation.update({
        where: { id: reservation.id },
        data: { 
          serviceId: randomService.id,
          totalPrice: reservation.totalPrice || randomService.price
        }
      });
      
      console.log(`‚úÖ R√©servation ${reservation.id} li√©e au service "${randomService.name}"`);
    }
    
    // V√©rifier le r√©sultat
    const updatedReservations = await prisma.reservation.findMany({
      include: { service: true }
    });
    
    console.log('\nüìä R√©sum√© des r√©servations par service:');
    const serviceCount: Record<string, number> = {};
    updatedReservations.forEach(r => {
      const serviceName = r.service?.name || 'Sans service';
      serviceCount[serviceName] = (serviceCount[serviceName] || 0) + 1;
    });
    
    Object.entries(serviceCount).forEach(([service, count]) => {
      console.log(`  - ${service}: ${count} r√©servations`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixReservations();