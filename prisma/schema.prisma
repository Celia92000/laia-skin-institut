generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String            @id @default(cuid())
  email          String            @unique
  password       String
  name           String
  phone          String?
  role           String            @default("client")
  loyaltyPoints  Int               @default(0)
  totalSpent     Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adminNotes     String?
  allergies      String?
  birthDate      DateTime?
  lastVisit      DateTime?
  medicalNotes   String?
  preferences    String?
  skinType       String?
  resetToken     String?
  resetTokenExpiry DateTime?
  evolutions     ClientEvolution[]
  loyaltyHistory LoyaltyHistory[]
  loyaltyProfile LoyaltyProfile?
  reservations   Reservation[]
  reviews        Review[]
  notifications  Notification[]
  referralsMade  Referral[]        @relation("ReferralReferrer")
  referredBy     Referral?         @relation("ReferralReferred")
  leads          Lead[]
  discounts      Discount[]
}

model Reservation {
  id              String    @id @default(cuid())
  userId          String
  serviceId       String?
  services        String    @default("[]") // JSON array of service IDs
  packages        String    @default("{}") // JSON object with service packages (single/forfait/abonnement)
  isSubscription  Boolean   @default(false) // True si c'est un abonnement mensuel
  date            DateTime
  time            String
  totalPrice      Float
  status          String    @default("pending")
  source          String    @default("site")
  notes           String?
  paymentStatus   String    @default("unpaid")
  paymentDate     DateTime?
  paymentAmount   Float?
  paymentMethod   String?
  invoiceNumber   String?
  paymentNotes    String?
  reviewEmailSent    Boolean   @default(false)
  reviewWhatsAppSent Boolean   @default(false)
  reminderSent       Boolean   @default(false)
  reminder24hSent    Boolean   @default(false)
  reminder2hSent     Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  service         Service?  @relation(fields: [serviceId], references: [id])
  review          Review?
}

model Service {
  id                String        @id @default(cuid())
  slug              String        @unique @default("")
  name              String
  shortDescription  String        @default("")
  description       String
  metaTitle         String?
  metaDescription   String?
  keywords          String?
  price             Float
  launchPrice       Float?
  promoPrice        Float?
  forfaitPrice      Float?
  forfaitPromo      Float?
  duration          Int
  benefits          String? // JSON
  process           String? // JSON - Deprecated, use protocol instead
  protocol          String? // JSON - Array of {title, duration, desc}
  recommendations   String?
  contraindications String?
  mainImage         String?
  gallery           String? // JSON
  videoUrl          String?
  canBeOption       Boolean       @default(false)
  category          String?
  order             Int           @default(0)
  active            Boolean       @default(true)
  featured          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reservations      Reservation[]
}

model LoyaltyProfile {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  points                  Int       @default(0)
  tier                    String    @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  individualServicesCount Int       @default(0)
  packagesCount           Int       @default(0)
  totalSpent              Float     @default(0)
  availableDiscounts      String    @default("[]") // JSON
  referralCode            String?   @unique // Code parrainage unique du client
  referredBy              String?   // Code de parrainage utilisé lors de l'inscription
  totalReferrals          Int       @default(0) // Nombre de parrainages effectués
  lastVisit               DateTime?
  notes                   String?   @db.Text // Notes administratives sur le client
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id])
  history                 LoyaltyHistory[]
}

model LoyaltyHistory {
  id            String         @id @default(cuid())
  userId        String
  profileId     String?
  action        String
  points        Int            @default(0)
  description   String
  reservationId String?
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  profile       LoyaltyProfile? @relation(fields: [profileId], references: [id])
}

model Referral {
  id                String         @id @default(cuid())
  referrerUserId    String         // ID de l'utilisateur parrain
  referralCode      String         @unique // Code unique de parrainage
  referredEmail     String?        // Email du filleul avant inscription
  referredName      String?        // Nom du filleul
  referredUserId    String?        @unique // ID du filleul une fois inscrit
  status            String         @default("pending") // pending, used, rewarded
  rewardAmount      Float          @default(20) // Montant de la récompense en euros
  rewardUsedAt      DateTime?      // Date d'utilisation de la récompense
  firstServiceDate  DateTime?      // Date du premier soin du filleul
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  referrer          User           @relation("ReferralReferrer", fields: [referrerUserId], references: [id])
  referred          User?          @relation("ReferralReferred", fields: [referredUserId], references: [id])
}

model BlogPost {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  excerpt         String
  content         String
  category        String
  author          String   @default("LAIA SKIN Institut")
  readTime        String   @default("5 min")
  featured        Boolean  @default(false)
  published       Boolean  @default(true)
  mainImage       String?
  gallery         String? // JSON
  tags            String? // JSON
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ClientEvolution {
  id             String   @id @default(cuid())
  userId         String
  sessionNumber  Int
  serviceName    String
  sessionDate    DateTime
  beforePhoto    String?
  afterPhoto     String?
  videoUrl       String?
  improvements   String? // JSON
  clientFeedback String?
  adminNotes     String?
  skinAnalysis   String? // JSON
  treatedAreas   String? // JSON
  productsUsed   String? // JSON
  hydrationLevel Int?
  elasticity     Int?
  pigmentation   Int?
  wrinkleDepth   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Review {
  id            String       @id @default(cuid())
  userId        String
  reservationId String?      @unique
  serviceName   String?
  rating        Int
  comment       String
  satisfaction  Int          @default(5)
  photos        String       @default("[]") // JSON array of photo URLs
  response      String?
  approved      Boolean      @default(false)
  featured      Boolean      @default(false)
  source        String       @default("site") // site, email, whatsapp, google
  googleReview  Boolean      @default(false)
  googleUrl     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // reminder, promotion, loyalty, birthday, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedSlot {
  id        String   @id @default(cuid())
  date      DateTime
  time      String?  // Si null, toute la journée est bloquée
  allDay    Boolean  @default(false)
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([date, time])
}

model WorkingHours {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Dimanche, 1 = Lundi, etc.
  startTime String   // Format: "14:00"
  endTime   String   // Format: "20:00"
  isOpen    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([dayOfWeek])
}

model Package {
  id          String   @id @default(cuid())
  name        String
  description String
  services    String // JSON array of service IDs
  price       Float
  validDays   Int      @default(90)
  maxUses     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  subject     String?
  message     String?
  source      String   @default("contact_form") // contact_form, instagram, facebook, phone
  status      String   @default("new") // new, contacted, qualified, converted, lost
  notes       String?
  userId      String?  // Lien vers User si converti en client
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
}

model EmailHistory {
  id           String   @id @default(cuid())
  from         String   @default("contact@laiaskininstitut.fr")
  to           String   // Email ou liste d'emails séparés par virgule
  subject      String
  content      String   // Contenu du message
  template     String?  // Template utilisé
  status       String   @default("sent") // sent, failed, pending
  direction    String   @default("outgoing") // outgoing, incoming
  campaignId   String?
  userId       String?  // Client associé
  errorMessage String?
  openedAt     DateTime?
  clickedAt    DateTime?
  createdAt    DateTime @default(now())
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
}

model EmailCampaign {
  id             String   @id @default(cuid())
  name           String
  subject        String
  content        String
  template       String?
  recipients     String   // JSON array des destinataires
  recipientCount Int      @default(0)
  status         String   @default("draft") // draft, scheduled, sent, cancelled
  scheduledAt    DateTime?
  sentAt         DateTime?
  openRate       Float    @default(0)
  clickRate      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  emails         EmailHistory[]
}

model Discount {
  id                String    @id @default(cuid())
  userId            String
  type              String    // service_5, package_9, birthday, referral, postponed
  amount            Float
  status            String    @default("available") // available, used, expired, postponed
  originalReason    String    // Raison initiale (ex: "5ème soin", "9ème séance", "Anniversaire")
  usedAt            DateTime?
  usedForReservation String?  // ID de la réservation où la réduction a été utilisée
  expiresAt         DateTime? // Date d'expiration
  postponedFrom     String?   // ID de la réduction d'origine si reportée
  postponedTo       DateTime? // Date jusqu'à laquelle c'est reporté
  postponedReason   String?   // Raison du report
  notes             String?   // Notes additionnelles
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
}

model PromoCode {
  id           String    @id @default(cuid())
  code         String    @unique
  discount     Float     // Montant de la réduction
  type         String    // birthday, referral, special
  validFrom    DateTime  @default(now())
  validUntil   DateTime?
  maxUses      Int?      // Nombre max d'utilisations
  usedCount    Int       @default(0)
  userId       String?   // Si le code est spécifique à un utilisateur
  conditions   String?   // Conditions d'utilisation (JSON)
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model EmailAutomation {
  id          String   @id @default(cuid())
  name        String
  trigger     String   // birthday, appointment_reminder, review_request, etc.
  template    String   // EmailJS template ID
  enabled     Boolean  @default(true)
  timing      String?  // JSON avec les infos de timing
  conditions  String?  // JSON avec les conditions
  lastRun     DateTime?
  nextRun     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GoogleReview {
  id           String   @id @default(cuid())
  authorName   String
  authorPhoto  String?
  rating       Int
  comment      String
  reviewId     String   @unique // ID Google pour éviter les doublons
  publishedAt  DateTime
  replyText    String?
  replyAt      DateTime?
  helpful      Int      @default(0)
  language     String   @default("fr")
  syncedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BusinessStats {
  id                 String   @id @default(cuid())
  googleRating       Float    @default(0)
  googleReviewCount  Int      @default(0)
  internalRating     Float    @default(0)
  internalReviewCount Int     @default(0)
  lastGoogleSync     DateTime?
  googlePlaceId      String?
  googleBusinessUrl  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model NewsletterSubscriber {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  isActive        Boolean   @default(true)
  subscribedAt    DateTime  @default(now())
  unsubscribedAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model WhatsAppHistory {
  id            String   @id @default(cuid())
  from          String   // Numéro de téléphone de l'expéditeur
  to            String   // Numéro de téléphone du destinataire
  message       String   // Contenu du message
  status        String   @default("sent") // sent, delivered, read, failed
  direction     String   @default("outgoing") // outgoing, incoming
  userId        String?  // Client associé
  mediaUrl      String?  // URL des médias attachés
  errorMessage  String?
  deliveredAt   DateTime?
  readAt        DateTime?
  createdAt     DateTime @default(now())
}

model WhatsAppTemplate {
  id            String   @id @default(cuid())
  name          String   @unique
  category      String   // reminder, promotion, birthday, followup, custom
  content       String   // Template avec variables {name}, {time}, etc.
  variables     String   // JSON array des variables utilisées
  usage         Int      @default(0)
  successRate   Float    @default(100)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WhatsAppAutomation {
  id            String   @id @default(cuid())
  name          String
  trigger       String   // appointment_24h, appointment_48h, birthday, post_service, review_request
  templateId    String   // Référence au template
  enabled       Boolean  @default(true)
  timing        String?  // JSON avec les infos de timing (heures avant/après, heure d'envoi, etc.)
  conditions    String?  // JSON avec les conditions d'envoi
  lastRun       DateTime?
  nextRun       DateTime?
  messagesSent  Int      @default(0)
  successCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WhatsAppCampaign {
  id             String   @id @default(cuid())
  name           String
  templateId     String   // Référence au template
  recipients     String   // JSON array des numéros ou tags
  recipientCount Int      @default(0)
  status         String   @default("draft") // draft, scheduled, active, paused, completed, cancelled
  scheduledAt    DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  sentCount      Int      @default(0)
  deliveredCount Int      @default(0)
  readCount      Int      @default(0)
  failedCount    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CommunicationHistory {
  id           String   @id @default(cuid())
  userId       String   // Client associé
  type         String   // email, whatsapp, sms, call
  direction    String   // incoming, outgoing
  subject      String?  // Pour les emails
  content      String   // Contenu du message
  status       String   @default("sent") // sent, delivered, read, failed
  metadata     String?  // JSON avec métadonnées supplémentaires
  createdAt    DateTime @default(now())
}

model Product {
  id               String   @id @default(cuid())
  name             String
  description      String
  shortDescription String?
  price            Float
  salePrice        Float?
  cost             Float?
  sku              String?  @unique
  barcode          String?
  stock            Int      @default(0)
  stockAlert       Int      @default(5)
  category         String?
  brand            String?
  supplier         String?
  mainImage        String?
  gallery          String?  // JSON array d'URLs d'images
  weight           Float?
  dimensions       String?
  ingredients      String?
  usage            String?
  benefits         String?
  active           Boolean  @default(true)
  featured         Boolean  @default(false)
  order            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

